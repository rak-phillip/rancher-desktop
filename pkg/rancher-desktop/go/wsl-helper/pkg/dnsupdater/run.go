//go:build windows
// +build windows

/*
Copyright © 2022 SUSE LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/*
Copyright © 2022 NAME HERE <EMAIL ADDRESS>

*/
package dnsupdater

import (
	"bytes"
	"crypto/md5"
	"fmt"
	"net/netip"
	"os"
	"sort"

	"golang.org/x/sys/windows"
	"golang.zx2c4.com/wireguard/windows/tunnel/winipcfg"
)

func Run(path string) error {
	addrs, err := winipcfg.GetAdaptersAddresses(windows.AF_INET, winipcfg.GAAFlagIncludeAll)
	if err != nil {
		return err
	}
	// sort and make sure IPV4 exists
	sort.Slice(addrs, func(i, j int) bool {
		return addrs[i].Ipv4Metric < addrs[i].Ipv4Metric
	})
	var preferredInf *winipcfg.IPAdapterAddresses
	// grab the first qualifying entry
	for _, a := range addrs {
		if a.OperStatus == winipcfg.IfOperStatusUp && a.FirstDNSServerAddress != nil {
			preferredInf = a
			break
		}
	}

	dnsSrvs, err := preferredInf.LUID.DNS()
	if err != nil {
		return err
	}
	f, err := os.OpenFile(path, os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer f.Close()
	// check for same content before writing
	existingContent, err := os.ReadFile(f.Name())
	if err != nil {
		return err
	}

	oldChecksum := md5.Sum(existingContent)

	newContent := resolveConf(dnsSrvs)
	newChecksum := md5.Sum(newContent.Bytes())

	// only write if different servers exsit
	if oldChecksum != newChecksum {
		_, err := f.Write(newContent.Bytes())
		if err != nil {
			return err
		}
	}
	return nil
}

func resolveConf(dnsSrvs []netip.Addr) (b bytes.Buffer) {
	// for debugging purpose
	b.WriteString("# This file was automatically generated by Rancher Desktop; changes will be overwritten.\n")
	for _, srv := range dnsSrvs {
		b.WriteString(fmt.Sprintf("nameserver %s\n", srv))
	}
	return b
}
